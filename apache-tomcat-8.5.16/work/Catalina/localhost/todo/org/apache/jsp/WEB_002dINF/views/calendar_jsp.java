/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.16
 * Generated at: 2017-10-17 02:45:02 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class calendar_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1507788870000L));
    _jspx_dependants.put("jar:file:/C:/web_eclipse/apache-tomcat-8.5.16/webapps/todo/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fif_0026_005ftest;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fchoose;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fchoose = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.release();
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.release();
    _005fjspx_005ftagPool_005fc_005fchoose.release();
    _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"ko\">\r\n");
      out.write("<head>\r\n");
      out.write("\t<meta charset=\"utf-8\">\r\n");
      out.write("\t<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\">\r\n");
      out.write("\t<link rel=\"stylesheet\" type=\"text/css\" href=\"//cdnjs.cloudflare.com/ajax/libs/fullcalendar/3.3.1/fullcalendar.min.css\">\r\n");
      out.write("\t<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js\"></script>\r\n");
      out.write("\t<script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\"></script>\r\n");
      out.write("\t<script type=\"text/javascript\" src=\"http://momentjs.com/downloads/moment.min.js\"></script>\r\n");
      out.write("\t<script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.18.1/locale/ko.js\"></script>\r\n");
      out.write("\t<script type=\"text/javascript\" src=\"//cdnjs.cloudflare.com/ajax/libs/fullcalendar/3.3.1/fullcalendar.min.js\"></script>\t \r\n");
      out.write("\t<script type=\"text/javascript\" src=\"//cdnjs.cloudflare.com/ajax/libs/fullcalendar/3.3.1/locale/ko.js\"></script>\t \r\n");
      out.write("\t<script type=\"text/javascript\">\r\n");
      out.write("\t$(function() {\r\n");
      out.write("\t\t// 제목과 내용을 전달받아서 작은 모달창을 표시하기\r\n");
      out.write("\t\tfunction showSmallModal(title, message) {\r\n");
      out.write("\t\t\t$('#small-modal-title').text(title);\r\n");
      out.write("\t\t\t$(\"#small-modal-body\").html(\"<small>\" + message + \"</small>\");\r\n");
      out.write("\t\t\t$('#small-modal').modal('show');\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// 모달창이 켜질 때 모달창의 값을 초기화한다.\r\n");
      out.write("\t\tfunction initializeForm(date) {\r\n");
      out.write("\t\t\tvar yyyymmdd = date.format();\r\n");
      out.write("\t\t\tvar now = new Date();\r\n");
      out.write("\t\t\tvar hour = now.getHours();\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t$(\"#event-form-modal #event-title\").val(\"\");\r\n");
      out.write("\t\t\t$(\"#event-form-modal #event-description\").val(\"\");\r\n");
      out.write("\t\t\t$(\"#event-form-modal #event-start-date\").val(yyyymmdd);\r\n");
      out.write("\t\t\t$(\"#event-form-modal #event-end-date\").val(yyyymmdd);\r\n");
      out.write("\t\t\t$(\"#event-form-modal #event-start-hour\").val(hour);\r\n");
      out.write("\t\t\t$(\"#event-form-modal #event-start-minute\").val(\"00\");\r\n");
      out.write("\t\t\t$(\"#event-form-modal #event-end-hour\").val(parseInt(hour)+1);\r\n");
      out.write("\t\t\t$(\"#event-form-modal #event-end-minute\").val(\"00\");\t\t\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// 새로 등록할 일정정보를 모달창에서 읽어와서 객체로 만들기\r\n");
      out.write("\t\tfunction createEventData() {\r\n");
      out.write("\t\t\tvar eventData = {};\r\n");
      out.write("\t\t\teventData[\"title\"] = $(\"#event-title\").val();\r\n");
      out.write("\t\t\teventData[\"description\"] = $(\"#event-description\").val();\r\n");
      out.write("\t\t\teventData[\"startDate\"] = $('#event-start-date').val();\r\n");
      out.write("\t\t\teventData[\"startHour\"] = $('#event-start-hour').val();\r\n");
      out.write("\t\t\teventData[\"startMinute\"] = $('#event-start-minute').val();\r\n");
      out.write("\t\t\tif (!$(\"#event-all-day\").prop(\"checked\")) {\r\n");
      out.write("\t\t\t\teventData[\"endDate\"] = $('#event-end-date').val();\r\n");
      out.write("\t\t\t\teventData[\"endHour\"] = $('#event-end-hour').val();\r\n");
      out.write("\t\t\t\teventData[\"endMinute\"] = $('#event-end-minute').val();\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\teventData[\"allDay\"] = $(\"#event-all-day\").prop(\"checked\");\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\treturn eventData;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// 날짜에 대한 타임값을 YYYY-MM-DD HH:mm 형식을 문자열로 변환하기\r\n");
      out.write("\t\tfunction timeToString(time) {\r\n");
      out.write("\t\t\treturn moment(new Date(time)).format(\"YYYY-MM-DD HH:mm\");\r\n");
      out.write("\t\t}\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// 새로운 일정정보를 등록하는 버튼을 클릭했을 때 실행된다.\r\n");
      out.write("\t\t$(\"#add-event-btn\").click(function() {\r\n");
      out.write("\t\t\t$.ajax({\r\n");
      out.write("\t\t\t\ttype:'post',\r\n");
      out.write("\t\t\t\turl:'addevent.do',\r\n");
      out.write("\t\t\t\tdataType:'json',\r\n");
      out.write("\t\t\t\tdata:createEventData(),\t\r\n");
      out.write("\t\t\t\tsuccess:function(data) {\r\n");
      out.write("\t\t\t\t\t$(\"#event-form-modal\").modal(\"hide\");\r\n");
      out.write("\t\t\t\t\t// 캘린더를 갱신한다.\r\n");
      out.write("\t\t\t\t\t$(\"#calendar-box\").fullCalendar( 'refetchEvents' );\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// 캘린더를 초기화한다.\r\n");
      out.write("\t\t$(\"#calendar-box\").fullCalendar({\r\n");
      out.write("\t\t\t// [events : 일정데이트를 조회하는 콜백함수를 등록한다.]\r\n");
      out.write("\t\t\t// 콜백함수는 캘린더에서 년/월/주가 변경될 때마다 실행된다.\r\n");
      out.write("\t\t\t// 콜백함수는 start와 end는 moment함수다.\r\n");
      out.write("\t\t\t// start와 end는 캘린더의 시작일자와 종료일자 정보를 담고 있다.\r\n");
      out.write("\t\t\tevents: function(start, end, timezone, callback) {\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tvar paramData = {start:start.format(), end:end.format()}\r\n");
      out.write("\t\t\t\tvar requestUrl = \"my-events.do\";\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t// 우측의 사용자 목록에서 클릭된 사용자의 일정 정보를 조회하기\r\n");
      out.write("\t\t\t\tif ($(\"#member-list li.active\").length) {\r\n");
      out.write("\t\t\t\t\tvar clickedMemberId = $(\"#member-list li.active\").attr(\"id\").replace(\"member-id-\", \"\");\r\n");
      out.write("\t\t\t\t\tparamData['memberId'] = clickedMemberId;\r\n");
      out.write("\t\t\t\t\trequestUrl = \"other-events.do\";\r\n");
      out.write("\t\t\t\t} \r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t$.ajax({\r\n");
      out.write("\t\t\t\t\turl:requestUrl,\r\n");
      out.write("\t\t\t\t\tdata:paramData,\r\n");
      out.write("\t\t\t\t\tdataType:\"json\",\r\n");
      out.write("\t\t\t\t\tsuccess:function(data) {\r\n");
      out.write("\t\t\t\t\t\t// data에는 해당 사용자의 일정정보들이 들어있다.\r\n");
      out.write("\t\t\t\t\t\t// data -> [{\"id\":1,\"title\":\"테스트\",\"start\":1490857200000,\"end\":1490860800000,\"description\":\"테스트\"}]\r\n");
      out.write("\t\t\t\t\t\t// 서버로부터 전달받은 데이터의 시작일/종료일이 time값이다.\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t// 일정들을 하나씩 순회하면서 start값과 end값을 날짜형식으로 변환한다.\r\n");
      out.write("\t\t\t\t\t\t// 1490857200000 -> 2017-03-25 09:00\r\n");
      out.write("\t\t\t\t\t\t$.each(data, function(index, item) {\r\n");
      out.write("\t\t\t\t\t\t\t// 타임값을 날짜형식의 문자열로 변환한다.\r\n");
      out.write("\t\t\t\t\t\t\titem.start = timeToString(item.start);\r\n");
      out.write("\t\t\t\t\t\t\titem.end = timeToString(item.end);\r\n");
      out.write("\t\t\t\t\t\t})\r\n");
      out.write("\t\t\t\t\t\t// 일정정보를 callback함수에 전달하고 callback함수를 실행한다.\r\n");
      out.write("\t\t\t\t\t\t// callback함수를 실행하면 캘린더가 갱신된다.\r\n");
      out.write("\t\t\t\t\t\tcallback(data);\r\n");
      out.write("\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\terror:function() {\r\n");
      out.write("\t\t\t\t\t\talert(\"오류 발생\");\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t},\t\r\n");
      out.write("\t\t\t// [dayClick : 캘린더의 날짜를 클릭했을 때 실행되는 콜백함수다.]\r\n");
      out.write("\t\t\tdayClick: function(date, jsEvent, view) {\r\n");
      out.write("\t\t\t\t// 사용자 목록에 선택된 사용자가 없는 경우에만 일정등록 창을 표시한다. 사용자 목록에서 사용자가 선택되어 있는 경우는 다른 사용자의 일정을 보고 있는 중이기 때문이다.\r\n");
      out.write("\t\t\t\tif ($(\"#member-list li.active\").length == 0) {\r\n");
      out.write("\t\t\t\t\t// 일정정보를 입력하는 모달창의 입력값을 초기화한다.\r\n");
      out.write("\t\t\t\t\tinitializeForm(date);\r\n");
      out.write("\t\t\t\t\t// 모달창을 표시한다.\r\n");
      out.write("\t\t\t\t\t$(\"#event-form-modal\").modal(\"show\");\r\n");
      out.write("\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\tshowSmallModal(\"오류\", \"다른 사용자의 일정을 보고 있는 중에는 일정을 등록할 수 없습니다.\");\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\t// [eventClick : 캘린더에 표시된 일정 중 하나를 클릭했을 때 실행되는 콜백함수다.]\r\n");
      out.write("\t\t\teventClick: function(event, jsEvent, view) {\r\n");
      out.write("\t\t\t\t// 사용자 목록에 선택된 사용자가 없는 경우에만 일정등록 창을 표시한다. 사용자 목록에서 사용자가 선택되어 있는 경우는 다른 사용자의 일정을 보고 있는 중이기 때문이다.\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t$(\"#member-list li\").click(function() {\r\n");
      out.write("\t\t\t$(this).addClass(\"active\").siblings().removeClass(\"active\");\r\n");
      out.write("\t\t\t$(\"#calendar-box\").fullCalendar('refetchEvents');\r\n");
      out.write("\t\t});\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("\t</script>\t\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<div class=\"container\">\r\n");
      out.write("\t<nav class=\"navbar navbar-default\">\r\n");
      out.write("\t\t\t\t<div class=\"container-fluid\">\r\n");
      out.write("\t    \t<div class=\"navbar-header\">\r\n");
      out.write("\t      \t\t<a class=\"navbar-brand\" href=\"home.do\">우리 회사</a>\r\n");
      out.write("\t    \t</div>\r\n");
      out.write("\t    \t<ul class=\"nav navbar-nav\">\r\n");
      out.write("\t      \t\t<li><a href=\"home.do\">홈</a></li>\r\n");
      out.write("\t      \t\t<li class=\"active\"><a href=\"calendar.do\">일정보기</a></li>\r\n");
      out.write("\t    \t</ul>\r\n");
      out.write("\t    \t<ul class=\"nav navbar-nav pull-right\">\r\n");
      out.write("\t      \t\t");
      if (_jspx_meth_c_005fif_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("\t      \t\t");
      if (_jspx_meth_c_005fif_005f1(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("\t    \t</ul>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</nav>\r\n");
      out.write("\t<div class=\"row\">\r\n");
      out.write("\t\t<div class=\"col-xs-9\">\r\n");
      out.write("\t\t\t<div id=\"calendar-box\"></div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<div class=\"col-xs-3\">\r\n");
      out.write("\t\t\t<div class=\"panel panel-default\">\r\n");
      out.write("\t\t\t\t<div class=\"panel-heading\">사용자 목록</div>\r\n");
      out.write("\t\t\t\t<ul class=\"list-group\" id=\"member-list\">\r\n");
      out.write("\t\t\t\t");
      if (_jspx_meth_c_005fforEach_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("\t\t\t\t</ul>\r\n");
      out.write("\t\t\t\t<div class=\"panel-footer text-center\">\r\n");
      out.write("\t\t\t\t\t<a href=\"calendar.do\" class=\"btn btn-primary\">내 일정보기</a>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<div class=\"modal fade\" id=\"event-form-modal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"gridSystemModalLabel\">\r\n");
      out.write("  \t\t<div class=\"modal-dialog\" role=\"document\">\r\n");
      out.write("    \t\t<div class=\"modal-content\">\r\n");
      out.write("      \t\t\t<div class=\"modal-header\">\r\n");
      out.write("        \t\t\t<button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\r\n");
      out.write("        \t\t\t<h4 class=\"modal-title\" id=\"gridSystemModalLabel\">새 일정 등록폼</h4>\r\n");
      out.write("      \t\t\t</div>\r\n");
      out.write("      \t\t\t<div class=\"modal-body\">\r\n");
      out.write("      \t\t\t\t<form class=\"form-horizontal well\">\r\n");
      out.write("  \t\t\t\t\t\t<div class=\"form-group\">\r\n");
      out.write("    \t\t\t\t\t\t<label for=\"title\" class=\"col-sm-2 control-label\">제목</label>\r\n");
      out.write("    \t\t\t\t\t\t<div class=\"col-sm-10\">\r\n");
      out.write("      \t\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" id=\"event-title\" name=\"title\" placeholder=\"제목을 입력하세요\">\r\n");
      out.write("    \t\t\t\t\t\t</div>\r\n");
      out.write("  \t\t\t\t\t\t</div>\r\n");
      out.write("  \t\t\t\t\t\t<div class=\"form-group\">\r\n");
      out.write("    \t\t\t\t\t\t<label for=\"description\" class=\"col-sm-2 control-label\">내용</label>\r\n");
      out.write("    \t\t\t\t\t\t<div class=\"col-sm-10\">\r\n");
      out.write("      \t\t\t\t\t\t\t<textarea rows=\"3\" class=\"form-control\" id=\"event-description\" name=\"description\" placeholder=\"내용을 입력하세요\" ></textarea>\r\n");
      out.write("    \t\t\t\t\t\t</div>\r\n");
      out.write("  \t\t\t\t\t\t</div>\r\n");
      out.write("  \t\t\t\t\t\t<div class=\"form-group\">\r\n");
      out.write("    \t\t\t\t\t\t<label for=\"start-date\" class=\"col-sm-2 control-label\">시작 일시</label>\r\n");
      out.write("    \t\t\t\t\t\t<div class=\"col-sm-4\">\r\n");
      out.write("      \t\t\t\t\t\t\t<input type=\"date\" class=\"form-control\" id=\"event-start-date\" name=\"startDate\" >\r\n");
      out.write("    \t\t\t\t\t\t</div>\r\n");
      out.write("    \t\t\t\t\t\t<div class=\"col-sm-2\">\r\n");
      out.write("      \t\t\t\t\t\t\t<input type=\"number\" class=\"form-control\" id=\"event-start-hour\" name=\"startHour\"  min=\"0\" max=\"23\" step=\"1\">\r\n");
      out.write("    \t\t\t\t\t\t</div>\r\n");
      out.write("    \t\t\t\t\t\t<label for=\"start-hour\" class=\"col-sm-1 control-label\">시</label>\r\n");
      out.write("    \t\t\t\t\t\t<div class=\"col-sm-2\">\r\n");
      out.write("      \t\t\t\t\t\t\t<input type=\"number\" class=\"form-control\" id=\"event-start-minute\" name=\"startMinute\"  min=\"00\" max=\"50\" step=\"10\">\r\n");
      out.write("    \t\t\t\t\t\t</div>\r\n");
      out.write("    \t\t\t\t\t\t<label for=\"start-minute\" class=\"col-sm-1 control-label\">분</label>\r\n");
      out.write("  \t\t\t\t\t\t</div>\r\n");
      out.write("  \t\t\t\t\t\t<div class=\"form-group\">\r\n");
      out.write("    \t\t\t\t\t\t<label for=\"end-date\" class=\"col-sm-2 control-label\">종료 일시</label>\r\n");
      out.write("    \t\t\t\t\t\t<div class=\"col-sm-4\">\r\n");
      out.write("      \t\t\t\t\t\t\t<input type=\"date\" class=\"form-control\" id=\"event-end-date\" name=\"endDate\" >\r\n");
      out.write("    \t\t\t\t\t\t</div>\r\n");
      out.write("    \t\t\t\t\t\t<div class=\"col-sm-2\">\r\n");
      out.write("      \t\t\t\t\t\t\t<input type=\"number\" class=\"form-control\" id=\"event-end-hour\" name=\"endHour\" min=\"0\" max=\"23\" step=\"1\">\r\n");
      out.write("    \t\t\t\t\t\t</div>\r\n");
      out.write("    \t\t\t\t\t\t<label for=\"end-hour\" class=\"col-sm-1 control-label\">시</label>\r\n");
      out.write("    \t\t\t\t\t\t<div class=\"col-sm-2\">\r\n");
      out.write("      \t\t\t\t\t\t\t<input type=\"number\" class=\"form-control\" id=\"event-end-minute\" name=\"endMinute\" min=\"00\" max=\"50\" step=\"10\" >\r\n");
      out.write("    \t\t\t\t\t\t</div>\r\n");
      out.write("    \t\t\t\t\t\t<label for=\"end-minute\" class=\"col-sm-1 control-label\">분</label>\r\n");
      out.write("  \t\t\t\t\t\t</div>\r\n");
      out.write("  \t\t\t\t\t\t<div class=\"form-group\">\r\n");
      out.write("    \t\t\t\t\t\t<label for=\"title\" class=\"col-sm-2 control-label\">하루 종일</label>\r\n");
      out.write("    \t\t\t\t\t\t<div class=\"col-sm-1\">\r\n");
      out.write("    \t\t\t\t\t\t\t<input type=\"checkbox\" class=\"form-control\" id=\"event-all-day\" name=\"allDay\">\r\n");
      out.write("    \t\t\t\t\t\t</div>\r\n");
      out.write("  \t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t</form>\r\n");
      out.write("      \t\t\t</div>\r\n");
      out.write("      \t\t\t<div class=\"modal-footer\">\r\n");
      out.write("        \t\t\t<button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">닫기</button>\r\n");
      out.write("        \t\t\t<button type=\"button\" class=\"btn btn-primary\" id=\"add-event-btn\">등록</button>\r\n");
      out.write("      \t\t\t</div>\r\n");
      out.write("    \t\t</div>\r\n");
      out.write("  \t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t<!-- 경고메세지 출력용 작은 모달창 -->\r\n");
      out.write("\t<div id=\"small-modal\" class=\"modal bs-example-modal-sm\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"mySmallModalLabel\">\r\n");
      out.write(" \t\t\t<div class=\"modal-dialog modal-sm\" role=\"document\">\r\n");
      out.write("\t\t\t<div class=\"modal-content\">\r\n");
      out.write("\t\t      \t<div class=\"modal-header\">\r\n");
      out.write("\t\t        \t<button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\r\n");
      out.write("\t\t        \t<h4 class=\"modal-title\" id=\"small-modal-title\"></h4>\r\n");
      out.write("\t\t      \t</div>\r\n");
      out.write("\t\t      \t<div class=\"modal-body\" id=\"small-modal-body\"></div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t  \t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fif_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:if
    org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f0 = (org.apache.taglibs.standard.tag.rt.core.IfTag) _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.IfTag.class);
    boolean _jspx_th_c_005fif_005f0_reused = false;
    try {
      _jspx_th_c_005fif_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fif_005f0.setParent(null);
      // /WEB-INF/views/calendar.jsp(165,9) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fif_005f0.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${empty LOGIN_MEMBER }", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
      int _jspx_eval_c_005fif_005f0 = _jspx_th_c_005fif_005f0.doStartTag();
      if (_jspx_eval_c_005fif_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("\t\t      \t\t<li><a href=\"login.do\">로그인</a></li>\r\n");
          out.write("\t      \t\t");
          int evalDoAfterBody = _jspx_th_c_005fif_005f0.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fif_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.reuse(_jspx_th_c_005fif_005f0);
      _jspx_th_c_005fif_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fif_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fif_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fif_005f1(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:if
    org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f1 = (org.apache.taglibs.standard.tag.rt.core.IfTag) _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.IfTag.class);
    boolean _jspx_th_c_005fif_005f1_reused = false;
    try {
      _jspx_th_c_005fif_005f1.setPageContext(_jspx_page_context);
      _jspx_th_c_005fif_005f1.setParent(null);
      // /WEB-INF/views/calendar.jsp(168,9) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fif_005f1.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${not empty LOGIN_MEMBER }", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
      int _jspx_eval_c_005fif_005f1 = _jspx_th_c_005fif_005f1.doStartTag();
      if (_jspx_eval_c_005fif_005f1 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("\t\t      \t\t<li><a href=\"logout.do\">로그아웃</a></li>\r\n");
          out.write("\t      \t\t");
          int evalDoAfterBody = _jspx_th_c_005fif_005f1.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fif_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.reuse(_jspx_th_c_005fif_005f1);
      _jspx_th_c_005fif_005f1_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fif_005f1, _jsp_getInstanceManager(), _jspx_th_c_005fif_005f1_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fforEach_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:forEach
    org.apache.taglibs.standard.tag.rt.core.ForEachTag _jspx_th_c_005fforEach_005f0 = (org.apache.taglibs.standard.tag.rt.core.ForEachTag) _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.get(org.apache.taglibs.standard.tag.rt.core.ForEachTag.class);
    boolean _jspx_th_c_005fforEach_005f0_reused = false;
    try {
      _jspx_th_c_005fforEach_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fforEach_005f0.setParent(null);
      // /WEB-INF/views/calendar.jsp(182,4) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setVar("member");
      // /WEB-INF/views/calendar.jsp(182,4) name = items type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setItems(new org.apache.jasper.el.JspValueExpression("/WEB-INF/views/calendar.jsp(182,4) '${members }'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${members }",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      int[] _jspx_push_body_count_c_005fforEach_005f0 = new int[] { 0 };
      try {
        int _jspx_eval_c_005fforEach_005f0 = _jspx_th_c_005fforEach_005f0.doStartTag();
        if (_jspx_eval_c_005fforEach_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
          do {
            out.write("\r\n");
            out.write("\t\t\t\t\t");
            if (_jspx_meth_c_005fchoose_005f0(_jspx_th_c_005fforEach_005f0, _jspx_page_context, _jspx_push_body_count_c_005fforEach_005f0))
              return true;
            out.write("\r\n");
            out.write("\t\t\t\t");
            int evalDoAfterBody = _jspx_th_c_005fforEach_005f0.doAfterBody();
            if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
        }
        if (_jspx_th_c_005fforEach_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_c_005fforEach_005f0[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_c_005fforEach_005f0.doCatch(_jspx_exception);
      } finally {
        _jspx_th_c_005fforEach_005f0.doFinally();
      }
      _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.reuse(_jspx_th_c_005fforEach_005f0);
      _jspx_th_c_005fforEach_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fforEach_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fforEach_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fchoose_005f0(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fforEach_005f0, javax.servlet.jsp.PageContext _jspx_page_context, int[] _jspx_push_body_count_c_005fforEach_005f0)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:choose
    org.apache.taglibs.standard.tag.common.core.ChooseTag _jspx_th_c_005fchoose_005f0 = (org.apache.taglibs.standard.tag.common.core.ChooseTag) _005fjspx_005ftagPool_005fc_005fchoose.get(org.apache.taglibs.standard.tag.common.core.ChooseTag.class);
    boolean _jspx_th_c_005fchoose_005f0_reused = false;
    try {
      _jspx_th_c_005fchoose_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fchoose_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fforEach_005f0);
      int _jspx_eval_c_005fchoose_005f0 = _jspx_th_c_005fchoose_005f0.doStartTag();
      if (_jspx_eval_c_005fchoose_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("\t\t\t\t\t\t");
          if (_jspx_meth_c_005fwhen_005f0(_jspx_th_c_005fchoose_005f0, _jspx_page_context, _jspx_push_body_count_c_005fforEach_005f0))
            return true;
          out.write("\r\n");
          out.write("\t\t\t\t\t");
          int evalDoAfterBody = _jspx_th_c_005fchoose_005f0.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fchoose_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fchoose.reuse(_jspx_th_c_005fchoose_005f0);
      _jspx_th_c_005fchoose_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fchoose_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fchoose_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fwhen_005f0(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f0, javax.servlet.jsp.PageContext _jspx_page_context, int[] _jspx_push_body_count_c_005fforEach_005f0)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:when
    org.apache.taglibs.standard.tag.rt.core.WhenTag _jspx_th_c_005fwhen_005f0 = (org.apache.taglibs.standard.tag.rt.core.WhenTag) _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.WhenTag.class);
    boolean _jspx_th_c_005fwhen_005f0_reused = false;
    try {
      _jspx_th_c_005fwhen_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fwhen_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f0);
      // /WEB-INF/views/calendar.jsp(184,6) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fwhen_005f0.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${member.id ne LOGIN_MEMBER.id }", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
      int _jspx_eval_c_005fwhen_005f0 = _jspx_th_c_005fwhen_005f0.doStartTag();
      if (_jspx_eval_c_005fwhen_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("\t\t\t\t\t\t\t<li class=\"list-group-item\" id=\"member-id-");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${member.id }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write('"');
          out.write('>');
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${member.username }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("</li>\r\n");
          out.write("\t\t\t\t\t\t");
          int evalDoAfterBody = _jspx_th_c_005fwhen_005f0.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fwhen_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.reuse(_jspx_th_c_005fwhen_005f0);
      _jspx_th_c_005fwhen_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fwhen_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fwhen_005f0_reused);
    }
    return false;
  }
}
